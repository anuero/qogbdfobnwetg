# app.py
import streamlit as st
import pandas as pd
import json
import os
import tempfile
import logging
from typing import Any, Dict, List, Optional
from datetime import datetime
from b2sdk.v2 import InMemoryAccountInfo, B2Api
logging.getLogger('b2sdk').setLevel(logging.ERROR)
logging.getLogger('urllib3').setLevel(logging.ERROR)

st.set_page_config(page_title="UniReportViewer", layout="wide")

B2_APP_KEY_ID = st.secrets.get("B2_KEY_ID")
B2_APP_KEY = st.secrets.get("B2_APP_KEY")
B2_BUCKET_NAME = st.secrets.get("B2_BUCKET_NAME")

@st.cache_resource(show_spinner=False)
def get_b2_bucket():

    try:
        info = InMemoryAccountInfo()
        b2_api = B2Api(info)
        b2_api.authorize_account("production", B2_APP_KEY_ID, B2_APP_KEY)
        bucket = b2_api.get_bucket_by_name(B2_BUCKET_NAME)
        return bucket
    except Exception as e:
        return None

@st.cache_data(ttl=30, show_spinner=False)
def list_user_scans(_bucket, username: str) -> List[Dict[str, Any]]:
    if not _bucket:
        return []
    
    all_files = []
    try:
        for file_version, folder_name in _bucket.ls(fetch_count=1000):
            file_name = file_version.file_name
            if file_name.endswith(f"_{username}.json"):
                all_files.append({
                    "file_name": file_name,
                    "file_id": file_version.id_,
                    "upload_timestamp": file_version.upload_timestamp,
                    "size": file_version.size
                })
        
        all_files.sort(key=lambda x: x["upload_timestamp"], reverse=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ü—Ä–∏ –ü–æ–ª—É—á–µ–Ω–∏–∏ –°–ø–∏—Å–∫–∞ –§–∞–π–ª–æ–≤: {e}")
    
    return all_files

@st.cache_data(ttl=300, show_spinner=False)
def download_scan_from_b2(_bucket, file_name: str) -> Optional[Dict[str, Any]]:
    if not _bucket:
        return None
    
    tmp_path = None
    try:
        with tempfile.NamedTemporaryFile(mode='wb', delete=False, suffix='.json') as tmp_file:
            tmp_path = tmp_file.name
            download = _bucket.download_file_by_name(file_name)
            download.save_to(tmp_path)
        
        with open(tmp_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ü—Ä–∏ –ó–∞–≥—Ä—É–∑–∫–µ –§–∞–π–ª–∞ –ò–∑ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        if tmp_path and os.path.exists(tmp_path):
            try:
                os.unlink(tmp_path)
            except Exception:
                pass  

def ensure_list(x):
    if x is None:
        return []
    if isinstance(x, list):
        return x
    return [x]

def df_from_list_of_dicts(items: List[Dict], default_columns: List[str] = None) -> pd.DataFrame:
    if not items:
        if default_columns:
            return pd.DataFrame(columns=default_columns)
        return pd.DataFrame()
    return pd.json_normalize(items)

def quick_filter_df(df: pd.DataFrame, q: str) -> pd.DataFrame:
    if not q or df.empty:
        return df
    q = q.lower()
    mask = pd.Series(False, index=df.index)
    for col in df.columns:
        try:
            mask = mask | df[col].astype(str).str.lower().str.contains(q, na=False)
        except Exception:
            continue
    return df[mask]

def display_archive_tree(entries: List[Dict[str, Any]]):
    if not isinstance(entries, list):
        st.warning("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º.")
        return

    if not entries:
        st.write("–ù–µ—Ç –°–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
        return

    stack = [(entry, 0) for entry in reversed(entries)]

    while stack:
        current_entry, level = stack.pop()

        name = current_entry.get("–ò–º—è –≤ –∞—Ä—Ö–∏–≤–µ") or current_entry.get("–ò–º—è") or "<unknown>"
        is_dir = current_entry.get("–≠—Ç–æ –ø–∞–ø–∫–∞", False)
        size = current_entry.get("size")
        
        indent = " " * (level * 4)  
        icon = 'üìÅ' if is_dir else 'üìÑ'
        header = f"{indent}{icon} {name}"
        
        if size is not None:
            header += f" ‚Äî {size}"

        with st.expander(header, expanded=False):
            meta = {k: v for k, v in current_entry.items() if k not in ("–í–ª–æ–∂–µ–Ω–Ω–æ–µ", "–ò–º—è –≤ –∞—Ä—Ö–∏–≤–µ", "–ò–º—è")}
            if meta:
                st.json(meta)
            
            nested_entries = current_entry.get("–í–ª–æ–∂–µ–Ω–Ω–æ–µ")
            if isinstance(nested_entries, list) and nested_entries:
                for nested_entry in reversed(nested_entries):
                    stack.append((nested_entry, level + 1))


def format_timestamp(ts):
    try:
        dt = datetime.fromtimestamp(ts / 1000)  
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    except:
        return str(ts)

def format_size(size_bytes):
    if size_bytes is None:
        return ""
    try:
        size_bytes = float(size_bytes)
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.2f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.2f} TB"
    except (ValueError, TypeError):
        return ""


bucket = get_b2_bucket()

if not bucket:
    st.error("‚ùå –ù–µ –£–¥–∞–ª–æ—Å—å –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
        get_b2_bucket.clear()  
        st.rerun()  
        
    st.stop()

if 'username' not in st.session_state:
    st.session_state.username = ""
if 'selected_file' not in st.session_state:
    st.session_state.selected_file = None
if 'scan_data' not in st.session_state:
    st.session_state.scan_data = None
if 'current_section' not in st.session_state:
    st.session_state.current_section = "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

if st.session_state.scan_data:
    sections = [
        "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "üîß –î—Ä–∞–π–≤–µ—Ä–∞",
        "‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã",
        "üåê –î–∞–Ω–Ω—ã–µ –ë—Ä–∞—É–∑–µ—Ä–æ–≤",
        "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∏",
        "üñ•Ô∏è –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª",
        "üìÇ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –§–∞–π–ª—ã",
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –§–∞–π–ª—ã",
        "üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ú–æ–¥—É–ª–∏ –∏ –§–∞–π–ª—ã –ü—Ä–æ—Ü–µ—Å—Å–∞"
    ]
    st.session_state.current_section = st.sidebar.radio("–†–∞–∑–¥–µ–ª—ã –û—Ç—á—ë—Ç–∞", sections)

show_setup = not st.session_state.scan_data or st.session_state.current_section == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

if show_setup:
    st.subheader("1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ username")
    
    with st.form(key="user_search_form"):
        username_input = st.text_input(
            "Username –î–ª—è –ü–æ–∏—Å–∫–∞ –°–∫–∞–Ω–æ–≤:",
            value=st.session_state.get("username", ""),
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ivan"
        )
        
        submitted = st.form_submit_button("üîç –ü–æ–∏—Å–∫")

    if submitted:
        list_user_scans.clear()
        
        if username_input != st.session_state.username:
            st.session_state.username = username_input
            st.session_state.selected_file = None
            st.session_state.scan_data = None
        
        st.rerun()

    if st.session_state.username:
        st.subheader(f"2Ô∏è‚É£ –°–∫–∞–Ω—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {st.session_state.username}")
        
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –°–ø–∏—Å–∫–∞ –§–∞–π–ª–æ–≤..."):
            user_files = list_user_scans(bucket, st.session_state.username)
        
        if not user_files:
            st.warning(f"‚ö†Ô∏è –§–∞–π–ª—ã –î–ª—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{st.session_state.username}' –ù–µ –ù–∞–π–¥–µ–Ω—ã.")
        else:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –§–∞–π–ª–æ–≤: {len(user_files)}")
            
            display_files = []
            for f in user_files:
                display_files.append({
                    "–§–∞–π–ª": "report.json",  
                    "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏": format_timestamp(f["upload_timestamp"]),
                    "–†–∞–∑–º–µ—Ä": format_size(f["size"])
                })
            
            df_files = pd.DataFrame(display_files)
            st.dataframe(df_files, use_container_width=True, hide_index=True)
            
            file_options_display = [format_timestamp(f["upload_timestamp"]) for f in user_files]
            file_options_real = [f["file_name"] for f in user_files]
            
            current_index = 0
            if st.session_state.selected_file:
                try:
                    current_index = file_options_real.index(st.session_state.selected_file)
                except ValueError:
                    current_index = 0
            
            selected_display = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –§–∞–π–ª –î–ª—è –ü—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                options=file_options_display,
                index=current_index
            )
            
            selected_idx = file_options_display.index(selected_display)
            selected_real = file_options_real[selected_idx]
            
            if selected_real != st.session_state.selected_file:
                st.session_state.selected_file = selected_real
                st.session_state.scan_data = None
            
            if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –í—ã–±—Ä–∞–Ω–Ω—ã–π –§–∞–π–ª", type="primary"):
                with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –û—Ç—á—ë—Ç–∞ –û—Ç {selected_display}..."):
                    data = download_scan_from_b2(bucket, selected_real)
                    if data:
                        st.session_state.scan_data = data
                        st.success("‚úÖ –§–∞–π–ª –£—Å–ø–µ—à–Ω–æ –ó–∞–≥—Ä—É–∂–µ–Ω!")
                        st.rerun()

if st.session_state.scan_data:
    data = st.session_state.scan_data
    
    drivers_loaded = ensure_list(data.get("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã"))
    drivers_dir_files = ensure_list(data.get("–§–∞–π–ª—ã –ø–∞–ø–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤"))
    driverquery = ensure_list(data.get("–°–ª—É–∂–±—ã –¥—Ä–∞–π–≤–µ—Ä–æ–≤"))
    processes = ensure_list(data.get("–ü—Ä–æ—Ü–µ—Å—Å—ã"))
    modules = ensure_list(data.get("–ú–æ–¥—É–ª–∏"))
    process_dir_files = ensure_list(data.get("–§–∞–π–ª—ã –ø–∞–ø–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"))
    browser_downloads = ensure_list(data.get("–ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤"))
    file_snapshot = data.get("–°–Ω–∏–º–æ–∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã") or {}
    downloads_files = ensure_list(file_snapshot.get("–§–∞–π–ª—ã –∏–∑ –ó–∞–≥—Ä—É–∑–æ–∫"))
    desktop_files = ensure_list(file_snapshot.get("–§–∞–π–ª—ã —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞"))
    appdata_files = ensure_list(file_snapshot.get("–§–∞–π–ª—ã –∏–∑ AppData")) or ensure_list(data.get("–§–∞–π–ª—ã –∏–∑ AppData"))
    deleted_files = ensure_list(file_snapshot.get("–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–ö–æ—Ä–∑–∏–Ω–∞)")) or ensure_list(data.get("–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–ö–æ—Ä–∑–∏–Ω–∞)"))
    
    sel = st.session_state.current_section
    
    if sel == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        st.header("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", data.get('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'N/A'))
        with col2:
            st.metric("–î–∞—Ç–∞ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", data.get('–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'N/A'))
        with col3:
            st.metric("–í–µ—Ä—Å–∏—è Windows", data.get('–í–µ—Ä—Å–∏—è Windows', 'N/A'))
        
        st.subheader("–ë—ã—Å—Ç—Ä–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = {
            "–î—Ä–∞–π–≤–µ—Ä–∞ (–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ)": len(drivers_loaded),
            "–î—Ä–∞–π–≤–µ—Ä–∞ (–í –ü–∞–ø–∫–µ)": len(drivers_dir_files),
            "–°–µ—Ä–≤–∏—Å—ã –î—Ä–∞–π–≤–µ—Ä–æ–≤": len(driverquery),
            "–ü—Ä–æ—Ü–µ—Å—Å—ã": len(processes),
            "–ú–æ–¥—É–ª–∏": len(modules),
            "–î–∞–Ω–Ω—ã–µ –ë—Ä–∞—É–∑–µ—Ä–æ–≤": len(browser_downloads),
            "–ó–∞–≥—Ä—É–∑–∫–∏": len(downloads_files),
            "–§–∞–π–ª—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ": len(desktop_files),
            "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –§–∞–π–ª—ã": len(appdata_files),
            "–£–¥–∞–ª—ë–Ω–Ω—ã–µ –§–∞–π–ª—ã": len(deleted_files),
        }
        df_stats = pd.DataFrame.from_dict(stats, orient="index", columns=["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
        st.dataframe(df_stats, use_container_width=True)
        
    elif sel == "üîß –î—Ä–∞–π–≤–µ—Ä–∞":
        st.header("üîß –î—Ä–∞–π–≤–µ—Ä–∞")
        combined = []
        
        for d in drivers_loaded:
            combined.append({
                "–ò–º—è": d.get("–ò–º—è") or os.path.basename(d.get("–ü—É—Ç—å") or ""),
                "–ü—É—Ç—å": d.get("–ü—É—Ç—å"),
                "MD5": d.get("MD5"),
                **{k: v for k, v in d.items() if k not in ("–ò–º—è","–ü—É—Ç—å","MD5")}
            })
        for d in drivers_dir_files:
            combined.append({
                "–ò–º—è": d.get("–ò–º—è"),
                "–ü—É—Ç—å": d.get("–ü—É—Ç—å"),
                "MD5": d.get("MD5"),
                **{k:v for k,v in d.items() if k not in ("–ò–º—è","–ü—É—Ç—å","MD5")}
            })
        for d in driverquery:
            combined.append({
                "–ò–º—è –°–ª—É–∂–±—ã": d.get("–ò–º—è —Å–ª—É–∂–±—ã"),
                "–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ò–º—è": d.get("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"),
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ": d.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ"),
                "–ü—É—Ç—å –ö –§–∞–π–ª—É": d.get("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"),
                "MD5": d.get("MD5"),
                **{k:v for k,v in d.items() if k not in ("–ò–º—è —Å–ª—É–∂–±—ã","–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è","–°–æ—Å—Ç–æ—è–Ω–∏–µ","–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É","MD5")}
            })
        
        df_drv = df_from_list_of_dicts(combined)
        q = st.text_input("üîç –§–∏–ª—å—Ç—Ä –ü–æ –î—Ä–∞–π–≤–µ—Ä–∞–º", value="")
        filtered = quick_filter_df(df_drv, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –ò–∑ {len(df_drv)} –ó–∞–ø–∏—Å–µ–π")
        st.dataframe(filtered, use_container_width=True)
        
        if not filtered.empty:
            st.markdown("### üîé –î–µ—Ç–∞–ª–∏ –°—Ç—Ä–æ–∫–∏")
            row_idx = st.number_input("–ù–æ–º–µ—Ä –°—Ç—Ä–æ–∫–∏", min_value=0, max_value=max(0, len(filtered)-1), value=0)
            row = filtered.reset_index(drop=True).iloc[row_idx].to_dict()
            st.json(row)
            
    elif sel == "‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã":
        st.header("‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã")
        df_proc = df_from_list_of_dicts(processes, default_columns=["PID","–ò–º—è","–ü—É—Ç—å"])
        q = st.text_input("üîç –§–∏–ª—å—Ç—Ä –ü–æ –ü—Ä–æ—Ü–µ—Å—Å–∞–º", value="")
        filtered = quick_filter_df(df_proc, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –ò–∑ {len(df_proc)}")
        st.dataframe(filtered, use_container_width=True)
        
        st.markdown("### üîé –í—ã–±—Ä–∞—Ç—å PID –î–ª—è –ü–æ–¥—Ä–æ–±–Ω–æ–π –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        try:
            pids = list(map(int, filtered.get("PID", pd.Series([])).dropna().astype(int).unique()))
        except Exception:
            pids = []
        pid_choice = st.selectbox("PID", options=[None] + pids)
        if pid_choice:
            match = next((p for p in processes if int(p.get("PID", -1)) == int(pid_choice)), None)
            if match:
                st.json(match)
            
    elif sel == "üåê –î–∞–Ω–Ω—ã–µ –ë—Ä–∞—É–∑–µ—Ä–æ–≤":
        st.header("üåê –î–∞–Ω–Ω—ã–µ –ë—Ä–∞—É–∑–µ—Ä–æ–≤")
        df_bd = df_from_list_of_dicts(browser_downloads, default_columns=["–ë—Ä–∞—É–∑–µ—Ä", "–ò–º—è —Ñ–∞–π–ª–∞", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É", "URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞"])
        q = st.text_input("üîç –ü–æ–∏—Å–∫ –í –ó–∞–≥—Ä—É–∑–∫–∞—Ö", value="")
        filtered = quick_filter_df(df_bd, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –ò–∑ {len(df_bd)}")
        st.dataframe(filtered, use_container_width=True)
        
        if not filtered.empty:
            st.markdown("### üîé –î–µ—Ç–∞–ª–∏ –°—Ç—Ä–æ–∫–∏")
            idx = st.number_input("–ò–Ω–¥–µ–∫—Å", min_value=0, max_value=max(0, len(filtered)-1), value=0)
            st.json(filtered.reset_index(drop=True).iloc[idx].to_dict())
            
    elif sel == "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∏":
        st.header("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∏")
        df_dl = df_from_list_of_dicts(downloads_files)
        q = st.text_input("üîç –ü–æ–∏—Å–∫ –ü–æ –ò–º–µ–Ω–∏/–ü—É—Ç–∏", value="")
        filtered = quick_filter_df(df_dl, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –ò–∑ {len(df_dl)}")
        st.dataframe(filtered, use_container_width=True)
        
        if not filtered.empty:
            st.markdown("### üîé –ü—Ä–æ—Å–º–æ—Ç—Ä –î–µ—Ç–∞–ª–∏ –ê–∞–π–ª–∞")
            idx = st.number_input("–ò–Ω–¥–µ–∫—Å –§–∞–π–ª–∞", min_value=0, max_value=max(0, len(filtered)-1), value=0)
            file_rec = filtered.reset_index(drop=True).iloc[idx].to_dict()
            st.json(file_rec)
            archive_contents = file_rec.get("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞")
            if archive_contents:
                st.markdown("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ê—Ä—Ö–∏–≤–∞:**")
                display_archive_tree(archive_contents)

    elif sel == "üñ•Ô∏è –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª":
        st.header("üñ•Ô∏è –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
        df_desk = df_from_list_of_dicts(desktop_files)
        q = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ", value="")
        filtered = quick_filter_df(df_desk, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –∏–∑ {len(df_desk)} –∑–∞–ø–∏—Å–µ–π")
        st.dataframe(filtered, use_container_width=True)
        
        if not filtered.empty:
            st.markdown("### üîé –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ñ–∞–π–ª–∞")
            idx = st.number_input("–ò–Ω–¥–µ–∫—Å –§–∞–π–ª–∞", min_value=0, max_value=max(0, len(filtered)-1), value=0, key="desktop_idx")
            file_rec = filtered.reset_index(drop=True).iloc[idx].to_dict()
            
            display_dict = {k: v for k, v in file_rec.items() if k != "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞"}
            st.json(display_dict)

            archive_contents = file_rec.get("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞")
            is_nan = (
                archive_contents is None
                or (isinstance(archive_contents, float) and pd.isna(archive_contents))
                or (isinstance(archive_contents, (list, dict, pd.Series, pd.DataFrame)) and len(archive_contents) == 0)
            )

            if not is_nan:
                st.markdown("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ê—Ä—Ö–∏–≤–∞:**")
                display_archive_tree(archive_contents)
            else:
                st.warning("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º.")

            
    elif sel == "üìÇ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –§–∞–π–ª—ã":
        st.header("üìÇ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        df_ad = df_from_list_of_dicts(appdata_files)
        q = st.text_input("üîç –ü–æ–∏—Å–∫ –≤ AppData", value="")
        filtered = quick_filter_df(df_ad, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –ò–∑ {len(df_ad)}")
        st.dataframe(filtered, use_container_width=True)
        
        if not filtered.empty:
            idx = st.number_input("–ò–Ω–¥–µ–∫—Å", min_value=0, max_value=max(0, len(filtered)-1), value=0)
            rec = filtered.reset_index(drop=True).iloc[idx].to_dict()
            st.json(rec)
            archive_contents = rec.get("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞")
            if archive_contents:
                st.markdown("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ê—Ä—Ö–∏–≤–∞:")
                display_archive_tree(archive_contents)
            
    elif sel == "üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –§–∞–π–ª—ã":
        st.header("üóëÔ∏è –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        df_del = df_from_list_of_dicts(deleted_files)
        q = st.text_input("üîç –ü–æ–∏—Å–∫ –í –£–¥–∞–ª—ë–Ω–Ω—ã—Ö –§–∞–π–ª–∞—Ö", value="")
        filtered = quick_filter_df(df_del, q)
        st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered)} –ò–∑ {len(df_del)}")
        st.dataframe(filtered, use_container_width=True)
        
        if not filtered.empty:
            idx = st.number_input("–ò–Ω–¥–µ–∫—Å", min_value=0, max_value=max(0, len(filtered)-1), value=0)
            rec = filtered.reset_index(drop=True).iloc[idx].to_dict()
            st.json(rec)
            archive_contents = rec.get("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞")
            if archive_contents:
                st.markdown("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ê—Ä—Ö–∏–≤–∞:")
                display_archive_tree(archive_contents)
            
    elif sel == "üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ú–æ–¥—É–ª–∏ –∏ –§–∞–π–ª—ã –ü—Ä–æ—Ü–µ—Å—Å–∞":
        st.header("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ú–æ–¥—É–ª–∏ –∏ –§–∞–π–ª—ã –ü—Ä–æ—Ü–µ—Å—Å–∞")
        st.subheader("–°–ø–∏—Å–æ–∫ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ú–æ–¥—É–ª–µ–π")
        df_mod = df_from_list_of_dicts([{"–ü—É—Ç—å": m} for m in modules])
        st.dataframe(df_mod, use_container_width=True)
        
        st.subheader("–°–ø–∏—Å–æ–∫ –§–∞–π–ª–æ–≤ –ü—Ä–æ—Ü–µ—Å—Å–∞")
        df_pdf = df_from_list_of_dicts(process_dir_files)
        st.dataframe(df_pdf, use_container_width=True)